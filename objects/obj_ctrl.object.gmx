<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>texture_set_interpolation(1);
tw_init(fnt_sr,0.6);

global.proc = 0;
/*
 global.proc:
 1 Starting
 2 SIshow
 3 SIdisappear
 4 SRshow
 5 SRdisappear
*/
global.subproc = 0;

if (file_exists("avatar.png"))
{
    spr_load_avatar = sprite_add("avatar.png",1,0,1,0,0);
}
else
{
    spr_load_avatar = spr_avatar;
}
btn_back[B_LEFT] = 0;
btn_back[B_RIGHT] = 106;
btn_back[B_TOP] = 496;
btn_back[B_BOTTOM] = 540;
//Data Loading
ini_open("userdata.dcf");
global.schname = ini_read_string("school","name","希望ヶ峰学園");
global.schname_romaji = ini_read_string("school","name_romaji","UMESATOGAKUEN");
title_techou = ini_read_string("school","techou","電子生徒手帳");

si_name = ini_read_string("student","name","唯湖");
si_surname = ini_read_string("student","surname","来ヶ谷");
si_name_romaji = ini_read_string("student","name_romaji","YUIKO");
si_surname_romaji = ini_read_string("student","surname_romaji","KURUGAYA");
si_height = ini_read_string("student","height","170cm");
si_weight = ini_read_string("student","weight","55kg");
si_chest = ini_read_string("student","chest","90cm");
si_feature = ini_read_string("student","feature","ちょっぴりお茶目な姉御肌");

sr_textmax = ini_read_real("schoolrule","textmax",11);
if (!file_exists("userdata.dcf"))
{
    ini_write_string("school","name",global.schname);
    ini_write_string("school","techou",title_techou);
    ini_write_string("school","name_romaji",global.schname_romaji);
    ini_write_string("student","name",si_name);
    ini_write_string("student","surname",si_surname);
    ini_write_string("student","name_romaji",si_name_romaji);
    ini_write_string("student","surname_romaji",si_surname_romaji);
    ini_write_string("student","height",si_height);
    ini_write_string("student","weight",si_weight);
    ini_write_string("student","chest",si_chest);
    ini_write_string("student","feature",si_feature);
    ini_write_real("schoolrule","textmax",sr_textmax);
}
ini_close();
sr_text[0] = "生徒達はこの学園内だけで共同生活を行いましょう。共同生活の期限はありません。";
sr_text[1] = "夜１０時から朝７時までを”夜時間”とします。夜時間は立ち入り禁止区域があるので、注意しましょう。";
sr_text[2] = "就寝は寄宿舎に設けられた個室でのみ可能です。他の部屋での故意の就寝は居眠りとみなし罰します。";
sr_text[3] = "希望ヶ峰学園について調べるのは自由です。特に行動に制限は課せられません。";
sr_text[4] = "学園長ことモノクマへの暴力は禁じます。監視カメラの破壊も禁じます。";
sr_text[5] = "仲間の誰かを殺したクロは”卒業”となりますが、自分がクロだと他の生徒に知られてはなりません。";
sr_text[6] = "生徒内で殺人が起きた場合は、その一定時間後に、生徒全員参加が義務付けられる学級裁判が行われます。";
sr_text[7] = "学級裁判で正しいクロを指摘した場合は、クロだけが処刑されます。";
sr_text[8] = "学級裁判で正しいクロを指摘できなかった場合は、クロだけが卒業となり、残りの生徒は全員処刑です。#//あたいってば最强ね!";
sr_text[9] = "電子生徒手帳の他人への貸与を禁止します。";
sr_text[10] = "コロシアイ学園生活で同一のクロが殺せるのは、２人までとします。";
sr_text[11] = "鍵の掛かっているドアを壊すのは禁止とします。";
var _i;
for (_i=0;_i&lt;12;_i++)
{
    sr_text[_i] = tw_maxsplit(sr_text[_i],606,fnt_sr);
}
//Loading Complete


//Follow are the Solution for CJK Char displaying
/*var _fnt_title_sml;
var _fnt_title;
var _fnt_headln;
var _fnt_name;
var _fnt_name_romaji;
var _fnt_master;
var _fnt_shoumei;*/
var _rng_title_sml_min,_rng_title_sml_max;
var _rng_title_min,_rng_title_max;
var _rng_headln_min,_rng_headln_max;
var _rng_name_min,_rng_name_max;
var _rng_name_romaji_min,_rng_name_romaji_max;
var _rng_master_min,_rng_master_max;
var _rng_shoumei_min,_rng_shoumei_max;

_rng_title_sml_min = char_ascii_min(global.schname);
_rng_title_sml_max = char_ascii_max(global.schname);
_rng_title_min = char_ascii_min(title_techou);
_rng_title_max = char_ascii_max(title_techou);
_rng_headln_min = char_ascii_min(headln_schnromaji);
_rng_headln_max = char_ascii_max(headln_schnromaji);
_rng_name_min = char_ascii_max(si_name+si_surname

global.ctrlable = 0;

surf_text = surface_create(room_width,room_height);
surf_si = surface_create(room_width,room_height);
surf_main = surface_create(room_width,room_height);
surf_sr = surface_create(room_width,room_height);

badge_index = 0;
badge_x = (room_width/2)-157;
badge_y = (room_height/2)-154;
badge_imgspd = 0.3;

title_alpha = 0;
title_counter = 1;

//FOR AVOIDING THE LAG
        var _drawtext,_strheight,_techou;
        _drawtext = sn_split(global.schname);
        _techou = sn_split(title_techou);
        surface_set_target(surf_text);
        draw_clear_alpha($000000,0);
        draw_set_color(c_white);
        draw_set_font(fnt_title_sml);
        draw_text_ext(room_width/2-string_width(_drawtext)/2,10,_drawtext,32,200);
        _strheight = string_height_ext(_drawtext,32,200);
        draw_set_font(fnt_title);
        draw_text_ext(room_width/2-string_width(_techou)/2,_strheight+10,_techou,50,200);
        surface_reset_target();
//END

headln_part = 0;
headln_schnromaji = global.schname_romaji;
headln_drawed = 0;

btnsys_init();
btn_fst = 0;
btn_snd = 0;
btn_eff_count = 0;
btn_eff_max = 15;
btn_eff_aspd = 0.14;
btn_eff_ctdown = 16;
si_eff_count = 0;
si_surf_noise = surface_create(260,315);
//ALSO FOR AVOIDING THE LAG
        var _x,_y,_width,_width2,_width3,_height,_space;
        _x = 495;
        _y = 105;
        surface_set_target(surf_si);
        draw_clear_alpha($000000,0);
        draw_set_font(fnt_name_romaji);
        draw_text(_x,_y,"氏  名");
        draw_set_font(fnt_name);
        draw_text(_x+55,_y-10,si_surname +"  "+si_name);
        _width = string_width(si_surname);
        _width2 = string_width(si_name);
        _width3 = string_width(si_surname+"  ");
        _height = string_height(si_surname +"  "+si_name);
        draw_set_font(fnt_name_romaji);
        draw_text(_x+55+(_width/2)-(string_width(si_surname_romaji)/2),_y-18+_height,si_surname_romaji);
        draw_text(_x+55+_width3+(_width2/2)-(string_width(si_name_romaji)/2),_y-18+_height,si_name_romaji);
        draw_text(_x+0,_y+140,"身  長");
        draw_text(_x+95,_y+140,si_height);
        draw_text(_x+0,_y+190,"体  重");
        draw_text(_x+95,_y+190,si_weight);
        draw_text(_x+0,_y+240,"胸  囲");
        draw_text(_x+95,_y+240,si_chest);
        draw_text(_x+0,_y+290,"特  記");
        draw_text(_x+95,_y+290,si_feature);
        draw_set_font(fnt_shoumei);
        draw_text(_x-10,_y+340,"上記の者は当学園の生徒であることを証明する。");
        _height = string_height("上記の者は当学園の生徒であることを証明する。");
        draw_set_font(fnt_master);
        draw_text(_x-10,_y+330+_height,global.schname+"  学園長");
        surface_reset_target();
//END


//WHITE MASK
//Waiting for better solutin
var tmp_surf,tmp_surf_spr;
tmp_surf = surface_create(room_width,room_height);
tmp_surf_spr = surface_create(room_width,room_height);

surface_set_target(tmp_surf);
draw_clear_alpha(c_black,0)
draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
draw_surface(surf_si,0,0);
draw_sprite_ext(spr_avatar_bg,0,200,107,1,1,0,$FFFFFF,0.9);
draw_sprite(spr_load_avatar,0,200,107);
draw_set_blend_mode(bm_normal);
surface_reset_target();

surface_set_target(tmp_surf_spr);
draw_clear_alpha(c_black,0);
draw_surface(tmp_surf,0,0);
draw_set_blend_mode_ext(bm_dest_alpha,bm_zero);
draw_set_color(c_white);
draw_rectangle(0,0,room_width,room_height,0);
draw_set_blend_mode(bm_normal);
surface_reset_target();

si_eff_wmask = sprite_create_from_surface(tmp_surf_spr,0,0,room_width,room_height,0,1,0,0);

surface_free(tmp_surf);
surface_free(tmp_surf_spr);

sr_textpos = 0;
sr_eff_count = 0;
sr_btn_l = 0;
sr_btn_r = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_replace(list_btn_eff2,3-(btn_eff_ctdown/4)+1,0.8);
btn_eff_ctdown -= 4;
btn_eff_aspd = 0.03;
if (!list_allnot(list_btn_eff2,0)) alarm[0] = btn_eff_ctdown;
//show_message("Four is correct");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(surf_text)) surf_text = surface_create(room_width,room_height);
if (!surface_exists(surf_main)) surf_main = surface_create(room_width,room_height);
if (!surface_exists(surf_si)) surf_si = surface_create(room_width,room_height);
if (!surface_exists(si_surf_noise)) si_surf_noise = surface_create(room_width,room_height);
/*if (keyboard_check(vk_backspace))
{
    var _quit;
    _quit = show_question("真的要退出吗？");
    if (_quit) game_end();
}*/
if (mouse_check_button(1) &amp;&amp; !global.proc)
{
    /*var _left,_right,_bottom,_top,_x,_y;
    _x = badge_x;
    _y = badge_y;
    _left = _x+sprite_get_bbox_left(spr_badge);
    _right = _x+sprite_get_bbox_right(spr_badge);
    _bottom = _y+sprite_get_bbox_bottom(spr_badge);
    _top = _y+sprite_get_bbox_top(spr_badge);
    if (mouse_x&gt;=_left &amp;&amp; mouse_x&lt;=_right &amp;&amp; mouse_y&gt;=_top &amp;&amp; mouse_y &lt;= _bottom)
    */
    //if (mouse_onspr((badge_x,badge_y,spr_badge)))
    if (mouse_onspr(badge_x,badge_y,spr_badge))
    {
        global.proc = 1;
        audio_play_sound(snd_kidou,10,0);
    }
    
}
if (btn_ctrlable)
{
    if (mouse_check_button(1))
    {
        if (collision_point(mouse_x,mouse_y,prt_btn,0,0))
        {
            var _btn;
            _btn = collision_point(mouse_x,mouse_y,prt_btn,0,0);
            
            if (_btn == ds_list_find_value(list_btn_obj,0))
            {
                //SI
                switch(global.btn_status)
                {
                    case 2:
                        tw_reset();
                        global.proc = 5;
                        global.subproc = 1;
                        global.btn_dest = 1;
                        global.btn_status = 0;
                        sr_eff_count = 100;
                        break;
                }
                _btn = -1;
            }
            if (_btn == ds_list_find_value(list_btn_obj,1))
            {
                //SR
                //show_message("SR");
                switch(global.btn_status)
                {
                    case 1:
                        global.proc = 3;
                        global.subproc = 1;
                        global.btn_dest = 2;
                        global.btn_status = 0;
                        si_eff_count = 0;
                        break;
                }
                _btn = -1;
            }
            if (_btn == ds_list_find_value(list_btn_obj,2))
            {
                //
                _btn = -1;
            }
            if (_btn == ds_list_find_value(list_btn_obj,3))
            {
                //
                _btn = -1;
            }
        }
        if (mouse_x&gt;btn_back[B_LEFT] &amp;&amp; mouse_x&lt;btn_back[B_RIGHT] &amp;&amp; mouse_y&gt;btn_back[B_TOP] &amp;&amp; mouse_y&lt;btn_back[B_BOTTOM])
        {
            switch (global.proc)
            {
                case 1:
                case 2:
                    var _quit;
                    _quit = show_question("真的要退出吗？");
                    if (_quit) game_end();
                    break;
                
                case 4:
                    tw_reset();
                    global.proc = 5;
                    global.subproc = 1;
                    global.btn_dest = 1;
                    global.btn_status = 0;
                    sr_eff_count = 100;
                    break;
            }
        }
    }
}
if (global.proc == 1)
{
    badge_index += badge_imgspd;
    if (badge_index &gt;= 12 &amp;&amp; global.subproc == 0)
    {
        global.subproc = 1;
    }
    if (badge_index &gt;= sprite_get_number(spr_badge)-1)
    {
        badge_index = sprite_get_number(spr_badge)-1;
    }
    if (global.subproc == 1)
    {
        if (title_alpha &gt;= 2)
        {
            title_counter = -1;
        }
        
        title_alpha += 0.07*title_counter;
        if (title_alpha&lt;=0)
        {
            surface_set_target(surf_text);
            draw_clear_alpha($000000,0);
            surface_reset_target();
            title_alpha = 0;
            global.subproc = 2;
        }
    }
    if (global.subproc == 2)
    {
        if (headln_part&lt;960)
        {
            surface_set_target(surf_text);
            draw_clear_alpha($000000,0);
            draw_sprite(spr_headln,-1,-20,15);
            draw_set_font(fnt_headln);
            draw_text(850-string_width(headln_schnromaji),20,headln_schnromaji);
            draw_text(850-string_width(title_techou),42,title_techou);
            surface_reset_target();
            headln_part += 35;
        }
        else
        {
            headln_part = 960;
            headln_drawed = 1;
        }
        if (headln_part&gt;500)
        {
            if (btn_fst)
            {
                var _size;
                _size = ds_list_size(list_btn_eff);
                for (_i=0;_i&lt;_size;_i++)
                {
                    if (ds_list_find_value(list_btn_eff,_i)&lt;btn_eff_max)
                    {
                        var _spd,_eff;
                        _spd = ds_list_find_value(list_btn_eff2,_i);
                        _eff = ds_list_find_value(list_btn_eff,_i);
                        ds_list_replace(list_btn_eff,_i,_eff+_spd)
                    }
                    else
                    {
                        ds_list_replace(list_btn_eff,_i,btn_eff_max);
                        if (list_all(list_btn_eff,btn_eff_max))
                        {
                            btn_snd = 1;
                        }
                    }
                    if (ds_list_find_value(list_btn_eff,_i)&gt;0)
                    {
                        var _spd;
                        _spd = ds_list_find_value(list_btn_eff2,_i);
                        _spd -= btn_eff_aspd;
                        _spd = max(0,_spd);
                        ds_list_replace(list_btn_eff2,_i,_spd);
                    }
                }
                if (ds_list_find_value(list_btn_eff2,1)==0 &amp;&amp; !alarm[0] &amp;&amp; btn_eff_ctdown == 16)
                {
                    alarm[0] = btn_eff_ctdown;
                    global.btn_status = 1;
                }
            }
            else
            {
                list_allset(list_btn_eff,0);
                list_allset(list_btn_eff2,1);
                list_orderadd(list_btn_eff,-1*btn_eff_max/3);
                btn_fst = 1;
            }
        }
        if (btn_fst &amp;&amp; btn_snd &amp;&amp; headln_drawed)
        {
            global.subproc = 3;
        }
    }
}
if (global.proc == 2)
{
    if (global.subproc == 1)
    {
        tw_reset();
        list_allset(list_btn_eff,4.08);
        btn_eff_ctdown = 16;
        si_eff_count = 0;
        alarm[0] = btn_eff_ctdown;
        global.btn_status = 1;
        global.subproc = 2;
    }
    if (global.subproc == 2)
    {
        var _size;
        _size = ds_list_size(list_btn_eff);
        for (_i=0;_i&lt;_size;_i++)
        {
            if (ds_list_find_value(list_btn_eff,_i)&lt;btn_eff_max)
            {
                var _spd,_eff;
                _spd = ds_list_find_value(list_btn_eff2,_i);
                _eff = ds_list_find_value(list_btn_eff,_i);
                ds_list_replace(list_btn_eff,_i,_eff+_spd)
            }
            else
            {
                ds_list_replace(list_btn_eff,_i,btn_eff_max);
                if (list_all(list_btn_eff,btn_eff_max))
                {
                    global.subproc = 3;
                }
            }
            if (ds_list_find_value(list_btn_eff,_i)&gt;0)
            {
            var _spd;
            _spd = ds_list_find_value(list_btn_eff2,_i);
            _spd -= btn_eff_aspd;
            _spd = max(0,_spd);
            ds_list_replace(list_btn_eff2,_i,_spd);
            }
        }
    }
    
}
if (global.proc == 3)
{
    switch (global.subproc)
    {
        case 1:
            si_eff_count += 8;
            if (si_eff_count &gt;= 100)
            {
                si_eff_count = 100
                global.subproc = 2;
                list_orderadd(list_btn_eff,6);
                list_allset(list_btn_eff2,1.4);
                btn_eff_aspd = 0.08;
            }
            break;
        
        case 2:
            si_eff_count -= 5;
            if (si_eff_count &lt;= 0 &amp;&amp; ds_list_find_value(list_btn_eff,3) &lt;= 4.08)
            {
                si_eff_count = 0;
                global.subproc = 3;
            }
            var _size;
            _size = ds_list_size(list_btn_eff);
            for (_i=0;_i&lt;_size;_i+=1)
            {
                if (ds_list_find_value(list_btn_eff,_i)&gt;4.08)
                {
                    ds_list_replace(list_btn_eff,_i,ds_list_find_value(list_btn_eff,_i)-ds_list_find_value(list_btn_eff2,_i));
                }
                else
                {
                    ds_list_replace(list_btn_eff,_i,4.08);
                }
                if (ds_list_find_value(list_btn_eff2,_i)&gt;0)
                {
                    if (ds_list_find_value(list_btn_eff,_i)&lt;=btn_eff_max)
                    {
                        ds_list_replace(list_btn_eff2,_i,ds_list_find_value(list_btn_eff2,_i)-btn_eff_aspd);
                    }
                }
                else
                {
                    ds_list_replace(list_btn_eff2,_i,0);
                }
            }
            if (list_all(list_btn_eff,4.08))
            {
                switch (global.btn_dest)
                {
                    case 0:
                        //
                        break;
                        
                    case 1:
                        global.proc = 2;
                        global.subproc = 1;
                        break;
                        
                    case 2:
                        global.proc = 4;
                        global.subproc = 1;
                        break;
                        
                }
            }
            break;
            
            
    }
        
}
if (global.proc == 4)
{
    switch (global.subproc)
    {
        case 1:
            sr_eff_count += 5;
            surface_set_target(surf_main);
            draw_clear_alpha($000000,0);
            draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
            draw_sprite_ext(spr_sr_title,0,36,11,1,1,0,c_white,sr_eff_count/100)
            draw_set_blend_mode(bm_normal);
            draw_sprite_ext(spr_badge_num,floor(sr_eff_count/5),room_width/2,room_height/2-40+20*(sr_eff_count/100),1,1,0,c_white,sr_eff_count/100);
            surface_reset_target();
            if (sr_eff_count &gt;= 100)
            {
                global.subproc = 2;
                sr_eff_count = 0;
            }
            break;
            
        case 2:
            var _width;
            sr_eff_count += 5;
            surface_set_target(surf_main);
            draw_clear_alpha($000000,0);
            draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
            draw_sprite(spr_sr_title,0,36,11);
            draw_set_blend_mode(bm_normal);
            draw_sprite(spr_badge_num,floor(sr_eff_count/5),room_width/2,room_height/2-20+20*(sr_eff_count/100));
            draw_sprite_ext(spr_sr_txtarea,0,room_width/2,305,sr_eff_count/100,1,0,c_white,0.8);
            draw_set_font(fnt_name);
            _width = string_width(string(sr_textpos+1));
            draw_set_alpha(sr_eff_count/100);
            draw_text(room_width/2-(_width/2),room_height/2-100,string(sr_textpos+1));
            if (sr_textpos&lt;sr_textmax) draw_sprite(spr_sr_btn_r,0,632,173);
            if (sr_textpos&gt;0) draw_sprite(spr_sr_btn_l,0,282,173);
            draw_set_alpha(1);
            surface_reset_target();
            if (sr_eff_count &gt;= 100)
            {
                global.subproc = 3;
                global.btn_status = 2;
                sr_eff_count = 0;
            }
            break;
    }
}
if (global.proc == 5)
{
    var _width;
    sr_eff_count -= 5;
    surface_set_target(surf_main);
    draw_clear_alpha($000000,0);
    draw_set_alpha(sr_eff_count/100);
    draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
    draw_sprite(spr_sr_title,0,36,11-(6*(100-sr_eff_count)/100));
    draw_set_blend_mode(bm_normal);
    draw_sprite(spr_badge_num,sr_eff_count/5,room_width/2,room_height/2-(20*(100-sr_eff_count)/100));
    draw_set_font(fnt_name);
    _width = string_width(string(sr_textpos+1));
    draw_text(room_width/2-(_width/2),room_height/2-100-(20*(100-sr_eff_count)/100),string(sr_textpos+1));
    if (sr_textpos&lt;sr_textmax) draw_sprite(spr_sr_btn_r,0,632,173);
    if (sr_textpos&gt;0) draw_sprite(spr_sr_btn_l,0,282,173);
    draw_sprite_ext(spr_sr_txtarea,0,room_width/2,305,sr_eff_count/100,1,0,c_white,0.8);
    draw_set_alpha(1);
    surface_reset_target();
    if (sr_eff_count &lt;= 0)
    {
        switch (global.btn_dest)
        {
            case 0:
        //
            break;
                        
            case 1:
                global.proc = 2;
                global.subproc = 1;
            break;
                        
            case 2:
                global.proc = 4;
                global.subproc = 1;
            break;
                        
        }
    }
}
    
switch (global.btn_status)
{
    case 1:
        if (si_eff_count&lt;100)
        {
            si_eff_count += 4;
            surface_set_target(si_surf_noise)
            draw_clear_alpha(c_black,0);
            draw_sprite_part(spr_noise,round(random_range(0,3)),0,0,260,315*(floor(10-(si_eff_count/10)))/10,0,0);
            surface_reset_target();
        }
        else
        {
            //surface_free(si_surf_noise);
            si_eff_count = 100;
            global.ctrlable = 1;
        }
        if (si_eff_count&gt;=100)
        {
            surface_set_target(surf_main);
            draw_clear_alpha(c_black,0)
            draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
            draw_surface(surf_si,0,0);
            draw_sprite_ext(spr_avatar_bg,0,200,107,1,1,0,$FFFFFF,0.9);
            draw_sprite(spr_load_avatar,0,200,107);
            draw_set_blend_mode(bm_normal);
            surface_reset_target();
        }
        if (btn_fst &amp;&amp; btn_snd &amp;&amp; si_eff_count&gt;=100)
        {
            btn_ctrlable = 1;
            //si_eff_count = 0;
        }
        break;
        
        case 2:
            var _width,_alpha;
            //Pressed
            if (mouse_check_button_pressed(1))
            {
                if (mouse_onspr(632,173,spr_sr_btn_r))
                {
                    if (!sr_btn_l+sr_btn_r &amp;&amp; sr_textpos&lt;11)
                    {
                        sr_btn_r = 1;
                    }
                }
                if (mouse_onspr(282,173,spr_sr_btn_l))
                {
                    if (!sr_btn_l+sr_btn_r &amp;&amp; sr_textpos&gt;0)
                    {
                        sr_btn_l = 1;
                    }
                }
            }
            if (sr_btn_l+sr_btn_r)
            {
                sr_eff_count += 5;
                if (sr_eff_count == 50)
                {
                    sr_textpos += -1*sr_btn_l+sr_btn_r;
                    tw_reset();
                }
                if (sr_eff_count &gt;= 100)
                {
                    sr_eff_count = 0;
                    sr_btn_r = 0;
                    sr_btn_l = 0;
                }
            }
            if (sr_eff_count&lt;50)
            {
                _alpha = 1-sr_eff_count/50;
            }
            else
            {
                _alpha = (sr_eff_count-50)/50;
            }
            surface_set_target(surf_main);
            draw_clear_alpha($000000,0);
            draw_sprite(spr_badge_num,abs((sr_btn_l*20)-floor(sr_eff_count/5)),room_width/2,room_height/2);
            draw_set_font(fnt_name);
            draw_set_alpha(_alpha);
            _width = string_width(string(sr_textpos+1));
            draw_text(room_width/2-(_width/2),room_height/2-100,string(sr_textpos+1));
            draw_set_alpha(1);
            if (sr_textpos&lt;sr_textmax) draw_sprite(spr_sr_btn_r,sr_btn_r*floor(sr_eff_count/10),632,173);
            if (sr_textpos&gt;0) draw_sprite(spr_sr_btn_l,sr_btn_l*floor(sr_eff_count/10),282,173);
            surface_reset_target();
            tw_set_alpha(_alpha);
            draw_text_typewriter(180,314,sr_text[sr_textpos]);
            break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_clear_alpha($000000,0);
draw_background(bkg_main,0,0);
draw_sprite(spr_badge,floor(badge_index),badge_x,badge_y);
if (global.proc == 1 &amp;&amp; global.subproc == 1)
{
    draw_surface_ext(surf_text,0,0,1,1,0,$FFFFFF,title_alpha);
}
if (global.proc == 1 &amp;&amp; global.subproc == 2 &amp;&amp; !headln_drawed)
{
    draw_set_alpha(0.8);
    draw_surface_part(surf_text,0,0,headln_part,room_height,0,0);
    draw_set_alpha(1);
}
if (headln_drawed)
{
    draw_set_alpha(0.8);
    draw_sprite(spr_headln,-1,-20,15);
    draw_set_font(fnt_headln);
    draw_text(850-string_width(headln_schnromaji),20,headln_schnromaji);
    draw_text(850-string_width(title_techou),42,title_techou);
    draw_set_alpha(1);
}
if (global.proc == 3)
{
    switch (global.subproc)
    {
        case 1:
            draw_surface(surf_main,0,0);
            draw_sprite_ext(si_eff_wmask,0,0,0,1,1,0,c_white,si_eff_count/100);
            break;
            
        case 2:
            draw_sprite_ext(si_eff_wmask,0,0,0,1,1,0,c_white,si_eff_count/100);
            break;
            
    }
}
if (global.proc == 4 &amp;&amp; global.subproc &lt;3)
{
    draw_surface(surf_main,0,0);
}
if (global.proc == 5)
{
    draw_surface(surf_main,0,0);
}
switch (global.btn_status)
{
    case 1:
        if (si_eff_count&lt;100)
        {
            draw_set_alpha(si_eff_count/100);
            draw_surface_part(surf_si,0,0,room_width,room_height*si_eff_count/100,0,0);
            draw_sprite(spr_avatar_bg,0,200,107);
            draw_sprite(spr_load_avatar,0,200,107);
            draw_set_alpha(1);
            if (si_eff_count&lt;=40)
            {
                draw_surface_ext(si_surf_noise,200,422,1,-1,0,c_white,0.3+si_eff_count/100);
            }
            else
            {
                draw_surface_ext(si_surf_noise,200,422,1,-1,0,c_white,0.7-((si_eff_count&gt;40)*((si_eff_count-40)/120)));
            }
        }
        else
        {
            
            //draw_sprite_ext(spr_avatar_bg,0,200,107,1,1,0,$FFFFFF,0.9);
            draw_surface(surf_main,0,0);
            
        }
        break;
        
    case 2:
        draw_sprite_ext(spr_sr_txtarea,0,room_width/2,305,1,1,0,c_white,0.8);
        draw_sprite(spr_sr_title,0,36,11);
        draw_surface(surf_main,0,0);
}
//button drawing
var _btn,draw_x;
for(_i=0;_i&lt;ds_list_size(list_btn_eff);_i+=1)
{
    _btn = ds_list_find_value(list_btn_obj,_i);
    btn_eff_count = ds_list_find_value(list_btn_eff,_i);
    if (btn_eff_count&gt;btn_eff_max) btn_eff_count = btn_eff_max;
    draw_x = -177+177*(btn_eff_count/btn_eff_max)*(btn_eff_count&gt;0);
    _btn.x = draw_x;
    draw_sprite_ext(_btn.sprite_index,global.btn_status,floor(draw_x),_btn.y,1,1,0,$FFFFFF,1);
}
//Debug
draw_text(10,10,string(fps_real));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
